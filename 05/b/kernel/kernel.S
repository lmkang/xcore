[bits 32]
;若CPU自动压入错误码,为了栈中格式统一,这里不做操作
%define ERROR_CODE nop
;如果CPU没有压入错误码,为了栈中格式统一,手动压入一个0
%define ZERO push 0

extern idt_table ;中断处理程序数组

section .data
global intr_entry_table
intr_entry_table:
%macro INTR_VECTOR 2
section .text
intr%1entry:
	%2
	;保存上下文环境
	push ds
	push es
	push fs
	push gs
	pushad
	
	mov al, 0x20 ;中断结束命令EOI
	out 0xa0, al ;向从片发送
	out 0x20, al ;向主片发送
	
	push %1
	call [idt_table + %1 * 4]
	jmp intr_exit
	
section .data
	;存储各个中断入口程序的地址,形成intr_entry_table数组
	dd intr%1entry
%endmacro

section .text
global intr_exit
intr_exit:
	;恢复上下文环境
	add esp, 4
	popad
	pop gs
	pop fs
	pop es
	pop ds
	add esp, 4 ;跳过error_code
	iretd

INTR_VECTOR 0x00, ZERO
INTR_VECTOR 0x01, ZERO
INTR_VECTOR 0x02, ZERO
INTR_VECTOR 0x03, ZERO
INTR_VECTOR 0x04, ZERO
INTR_VECTOR 0x05, ZERO
INTR_VECTOR 0x06, ZERO
INTR_VECTOR 0x07, ZERO
INTR_VECTOR 0x08, ERROR_CODE
INTR_VECTOR 0x09, ZERO
INTR_VECTOR 0x0a, ERROR_CODE
INTR_VECTOR 0x0b, ERROR_CODE
INTR_VECTOR 0x0c, ZERO
INTR_VECTOR 0x0d, ERROR_CODE
INTR_VECTOR 0x0e, ERROR_CODE
INTR_VECTOR 0x0f, ZERO
INTR_VECTOR 0x10, ZERO
INTR_VECTOR 0x11, ERROR_CODE
INTR_VECTOR 0x12, ZERO
INTR_VECTOR 0x13, ZERO
INTR_VECTOR 0x14, ZERO
INTR_VECTOR 0x15, ZERO
INTR_VECTOR 0x16, ZERO
INTR_VECTOR 0x17, ZERO
INTR_VECTOR 0x18, ERROR_CODE
INTR_VECTOR 0x19, ZERO
INTR_VECTOR 0x1a, ERROR_CODE
INTR_VECTOR 0x1b, ERROR_CODE
INTR_VECTOR 0x1c, ZERO
INTR_VECTOR 0x1d, ERROR_CODE
INTR_VECTOR 0x1e, ERROR_CODE
INTR_VECTOR 0x1f, ZERO
INTR_VECTOR 0x20, ZERO